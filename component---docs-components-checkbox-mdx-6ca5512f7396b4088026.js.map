{"version":3,"sources":["webpack:///../docs/components/checkbox.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","style","marginLeft","parentName","__position","__code","__scope","Playground","useReducer","Checkbox","SelectionGroup","StatusLabel","Fieldset","ColorBox","LargeParagraph","Text","React","checkedItems","setCheckedItems","onChange","event","target","id","checked","label","disabled","name","CheckboxState","initialState","controllerCheckbox","checkbox1","checkbox2","checkbox3","checkbox4","checkbox5","state","action","payload","checkedCount","Object","keys","forEach","key","areAllChecked","areAllUnchecked","Error","dispatch","heading","aria-controls","indeterminate","marginTop","paddingInlineStart","entries","map","entry","listStyle","isMDXComponent"],"mappings":"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","file":"component---docs-components-checkbox-mdx-6ca5512f7396b4088026.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/helsinki-design-system/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport { useReducer } from 'react';\nimport { Checkbox, SelectionGroup, StatusLabel, Fieldset } from \"hds-react\";\nimport ColorBox from \"../../src/components/ColorBox\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Text from \"../../src/components/Text\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <StatusLabel type=\"info\" mdxType=\"StatusLabel\">Stable</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">Accessible</StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n  Checkboxes are used to pick an option when one or more options can be chosen. \n    </LargeParagraph>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`If the user can only select one option from a list, use `}<a parentName=\"li\" {...{\n          \"href\": \"/components/radio-button\"\n        }}>{`radio buttons`}</a>{` instead.`}</li>\n      <li parentName=\"ul\">{`Checkbox label should always clearly describe what will happen if the specific option is chosen. A good practice is to keep labels a maximum of three words long.`}</li>\n      <li parentName=\"ul\">{`Checkboxes work independently from each other. This means that checking one option should never affect other checkboxes.`}</li>\n      <li parentName=\"ul\">{`If Checkboxes are related to each other, use `}<a parentName=\"li\" {...{\n          \"href\": \"/components/selection-group\"\n        }}>{`HDS Selection group`}</a>{` to achieve that. `}</li>\n      <li parentName=\"ul\">{`Checkboxes should not have any immediate effects. The checkbox selection takes effect when the user presses a submit button (e.g. in a form). If you need the selection to have an immediate effect, use `}<a parentName=\"li\" {...{\n          \"href\": \"/components/toggle\"\n        }}>{`HDS Toggle button component`}</a>{` instead. Also see `}<a parentName=\"li\" {...{\n          \"href\": \"/guidelines/checkboxes-radiobuttons-toggles\"\n        }}>{`guidelines for choosing between radio buttons, checkboxes, and toggles.`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`It is advisable to use colour combinations provided by the implementation.`}</strong>{` These combinations are ensured to comply with WCAG AA requirements. When customising colors, refer to `}<a parentName=\"li\" {...{\n          \"href\": \"/design-tokens/colour\",\n          \"title\": \"Colour\"\n        }}>{`colour guidelines`}</a>{` to ensure accessibility.`}</li>\n      <li parentName=\"ul\">{`When multiple Checkboxes are related to each other, group them together using `}<a parentName=\"li\" {...{\n          \"href\": \"/components/selection-group\"\n        }}>{`HDS Selection group`}</a>{`. Selection group also includes a title for the group.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"checkbox-with-label\"\n    }}>{`Checkbox with label`}</h3>\n    <Playground __position={2} __code={'() => {\\n  const [checkedItems, setCheckedItems] = React.useState({\\n    \\'checkbox-checked\\': true,\\n    \\'checkbox-checked-disabled\\': true,\\n  })\\n  const onChange = event => {\\n    setCheckedItems({\\n      ...checkedItems,\\n      [event.target.id]: event.target.checked,\\n    })\\n  }\\n  return (\\n    <>\\n      <Checkbox\\n        label=\\\"Label\\\"\\n        id=\\\"checkbox\\\"\\n        checked={checkedItems[\\'checkbox\\']}\\n        onChange={onChange}\\n      />\\n      <Checkbox\\n        label=\\\"Label\\\"\\n        id=\\\"checkbox-checked\\\"\\n        checked={checkedItems[\\'checkbox-checked\\']}\\n        onChange={onChange}\\n      />\\n      <Checkbox\\n        label=\\\"Label\\\"\\n        id=\\\"checkbox-disabled\\\"\\n        checked={checkedItems[\\'checkbox-disabled\\']}\\n        onChange={onChange}\\n        disabled\\n      />\\n      <Checkbox\\n        label=\\\"Label\\\"\\n        id=\\\"checkbox-checked-disabled\\\"\\n        checked={checkedItems[\\'checkbox-checked-disabled\\']}\\n        onChange={onChange}\\n        disabled\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useReducer,\n      Checkbox,\n      SelectionGroup,\n      StatusLabel,\n      Fieldset,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checkedItems, setCheckedItems] = React.useState({\n          \"checkbox-checked\": true,\n          \"checkbox-checked-disabled\": true\n        });\n\n        const onChange = event => {\n          setCheckedItems({ ...checkedItems,\n            [event.target.id]: event.target.checked\n          });\n        };\n\n        return <>\n      <Checkbox label=\"Label\" id=\"checkbox\" checked={checkedItems[\"checkbox\"]} onChange={onChange} mdxType=\"Checkbox\" />\n      <Checkbox label=\"Label\" id=\"checkbox-checked\" checked={checkedItems[\"checkbox-checked\"]} onChange={onChange} mdxType=\"Checkbox\" />\n      <Checkbox label=\"Label\" id=\"checkbox-disabled\" checked={checkedItems[\"checkbox-disabled\"]} onChange={onChange} disabled mdxType=\"Checkbox\" />\n      <Checkbox label=\"Label\" id=\"checkbox-checked-disabled\" checked={checkedItems[\"checkbox-checked-disabled\"]} onChange={onChange} disabled mdxType=\"Checkbox\" />\n    </>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example\"\n    }}>{`Core code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- Enabled -->\n<div class=\"hds-checkbox\">\n  <input type=\"checkbox\" id=\"checkbox\" class=\"hds-checkbox__input\" />\n  <label for=\"checkbox\"  class=\"hds-checkbox__label\">Label</label>\n</div>\n\n<!-- Enabled & selected -->\n<div class=\"hds-checkbox\">\n  <input type=\"checkbox\" id=\"checkbox-checked\" class=\"hds-checkbox__input\" checked />\n  <label for=\"checkbox\"  class=\"hds-checkbox__label\">Label</label>\n</div>\n\n<!-- Disabled -->\n<div class=\"hds-checkbox\">\n  <input type=\"checkbox\" id=\"checkbox-disabled\" class=\"hds-checkbox__input\" disabled />\n  <label for=\"checkbox\"  class=\"hds-checkbox__label\">Label</label>\n</div>\n\n<!-- Disabled & selected -->\n<div class=\"hds-checkbox\">\n  <input type=\"checkbox\" id=\"checkbox-checked-disabled\" class=\"hds-checkbox__input\" checked disabled />\n  <label for=\"checkbox\"  class=\"hds-checkbox__label\">Label</label>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`  {() => {\n    const [checkedItems, setCheckedItems] = React.useState({ \"checkbox-checked\": true, \"checkbox-checked-disabled\": true });\n    const onChange = (event) => {\n      setCheckedItems({ ...checkedItems, [event.target.id]: event.target.checked });\n    };\n    return <>\n      <Checkbox label=\"Label\" id=\"checkbox\" checked={checkedItems[\"checkbox\"]} onChange={onChange} />\n      <Checkbox label=\"Label\" id=\"checkbox-checked\" checked={checkedItems[\"checkbox-checked\"]} onChange={onChange} />\n      <Checkbox label=\"Label\" id=\"checkbox-disabled\" checked={checkedItems[\"checkbox-disabled\"]} onChange={onChange} disabled />\n      <Checkbox label=\"Label\" id=\"checkbox-checked-disabled\" checked={checkedItems[\"checkbox-checked-disabled\"]} onChange={onChange} disabled />\n    </>\n  }}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"checkbox-group\"\n    }}>{`Checkbox group`}</h3>\n    <p>{`Related checkboxes can be grouped together with the Selection group component. See `}<a parentName=\"p\" {...{\n        \"href\": \"/components/selection-group\"\n      }}>{`HDS Selection group page`}</a>{` for full documentation.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [checkedItems, setCheckedItems] = React.useState({\\n    \\'v-checkbox1\\': true,\\n    \\'v-checkbox2\\': true,\\n  })\\n  const onChange = event => {\\n    setCheckedItems({\\n      ...checkedItems,\\n      [event.target.name]: event.target.checked,\\n    })\\n  }\\n  return (\\n    <SelectionGroup label=\\\"Checkbox group\\\">\\n      <Checkbox\\n        id=\\\"v-checkbox1\\\"\\n        name=\\\"v-checkbox1\\\"\\n        label=\\\"Option\\\"\\n        checked={checkedItems[\\'v-checkbox1\\']}\\n        onChange={onChange}\\n      />\\n      <Checkbox\\n        id=\\\"v-checkbox2\\\"\\n        name=\\\"v-checkbox2\\\"\\n        label=\\\"Option\\\"\\n        checked={checkedItems[\\'v-checkbox2\\']}\\n        onChange={onChange}\\n      />\\n      <Checkbox\\n        id=\\\"v-checkbox3\\\"\\n        name=\\\"v-checkbox3\\\"\\n        label=\\\"Option\\\"\\n        checked={checkedItems[\\'v-checkbox3\\']}\\n        onChange={onChange}\\n      />\\n      <Checkbox\\n        id=\\\"v-checkbox4\\\"\\n        name=\\\"v-checkbox4\\\"\\n        label=\\\"Option\\\"\\n        checked={checkedItems[\\'v-checkbox4\\']}\\n        onChange={onChange}\\n      />\\n    </SelectionGroup>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useReducer,\n      Checkbox,\n      SelectionGroup,\n      StatusLabel,\n      Fieldset,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checkedItems, setCheckedItems] = React.useState({\n          \"v-checkbox1\": true,\n          \"v-checkbox2\": true\n        });\n\n        const onChange = event => {\n          setCheckedItems({ ...checkedItems,\n            [event.target.name]: event.target.checked\n          });\n        };\n\n        return <SelectionGroup label=\"Checkbox group\" mdxType=\"SelectionGroup\">\n        <Checkbox id=\"v-checkbox1\" name=\"v-checkbox1\" label=\"Option\" checked={checkedItems[\"v-checkbox1\"]} onChange={onChange} mdxType=\"Checkbox\" />\n        <Checkbox id=\"v-checkbox2\" name=\"v-checkbox2\" label=\"Option\" checked={checkedItems[\"v-checkbox2\"]} onChange={onChange} mdxType=\"Checkbox\" />\n        <Checkbox id=\"v-checkbox3\" name=\"v-checkbox3\" label=\"Option\" checked={checkedItems[\"v-checkbox3\"]} onChange={onChange} mdxType=\"Checkbox\" />\n        <Checkbox id=\"v-checkbox4\" name=\"v-checkbox4\" label=\"Option\" checked={checkedItems[\"v-checkbox4\"]} onChange={onChange} mdxType=\"Checkbox\" />\n      </SelectionGroup>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example-1\"\n    }}>{`Core code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<fieldset class=\"hds-selection-group\">\n  <legend class=\"hds-selection-group__legend\">Checkbox group</legend>\n  <div class=\"hds-selection-group__items\">\n    <div class=\"hds-selection-group__item\">\n      <div class=\"hds-checkbox\">\n        <input type=\"checkbox\" id=\"v-checkbox1\" name=\"v-checkbox1\" class=\"hds-checkbox__input\" value=\"foo\" checked />\n        <label for=\"v-checkbox1\" class=\"hds-checkbox__label\">Option</label>\n      </div>\n    </div>\n    <div class=\"hds-selection-group__item\">\n      <div class=\"hds-checkbox\">\n        <input type=\"checkbox\" id=\"v-checkbox2\" name=\"v-checkbox2\" class=\"hds-checkbox__input\" value=\"bar\" checked/>\n        <label for=\"v-checkbox2\" class=\"hds-checkbox__label\">Option</label>\n      </div>\n    </div>\n    <div class=\"hds-selection-group__item\">\n      <div class=\"hds-checkbox\">\n        <input type=\"checkbox\" id=\"v-checkbox3\" name=\"v-checkbox3\" class=\"hds-checkbox__input\" value=\"baz\" />\n        <label for=\"v-checkbox3\" class=\"hds-checkbox__label\">Option</label>\n      </div>\n    </div>\n    <div class=\"hds-selection-group__item\">\n      <div class=\"hds-checkbox\">\n        <input type=\"checkbox\" id=\"v-checkbox4\" name=\"v-checkbox4\" class=\"hds-checkbox__input\" value=\"qux\" />\n        <label for=\"v-checkbox4\" class=\"hds-checkbox__label\">Option</label>\n      </div>\n    </div>\n  </div>\n</fieldset>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example-1\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<SelectionGroup label=\"Checkbox group\">\n  <Checkbox id=\"v-checkbox1\" name=\"v-checkbox1\" label=\"Option\" checked />\n  <Checkbox id=\"v-checkbox2\" name=\"v-checkbox2\" label=\"Option\" checked />\n  <Checkbox id=\"v-checkbox3\" name=\"v-checkbox3\" label=\"Option\" />\n  <Checkbox id=\"v-checkbox4\" name=\"v-checkbox4\" label=\"Option\" />\n</SelectionGroup>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"indeterminate\"\n    }}>{`Indeterminate`}</h3>\n    <p>{`Checkboxes also have a \"mixed\" state that is called an indeterminate state. This state is meant to be between the checked and unchecked states. While not very common, the usual use case for the indeterminate state is nested checkboxes. The parent checkbox can be in the indeterminate state when only part of the children checkboxes are checked.`}</p>\n    <p>{`Note! You will always have to use JavaScript to set a checkbox to the indeterminate state. Currently, it cannot be done through HTML. The HDS React component will do this part automatically when the `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` property is given.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const CheckboxState = {\\n    checked: 0,\\n    unchecked: 1,\\n    indeterminate: 2,\\n  }\\n  const areAllChecked = state => {\\n    let checkedCount = 0\\n    Object.keys(state).forEach(key => {\\n      if (key === \\'controllerCheckbox\\') {\\n        return\\n      }\\n      if (state[key] === CheckboxState.checked) {\\n        checkedCount += 1\\n      }\\n    })\\n    return checkedCount === 4\\n  }\\n  const areAllUnchecked = state => {\\n    let checkedCount = 0\\n    Object.keys(state).forEach(key => {\\n      if (key === \\'controllerCheckbox\\') {\\n        return\\n      }\\n      if (state[key] === CheckboxState.checked) {\\n        checkedCount += 1\\n      }\\n    })\\n    return checkedCount === 1\\n  }\\n  const reducer = (state, action) => {\\n    switch (action.type) {\\n      case \\'check\\': {\\n        if (action.payload === \\'controllerCheckbox\\') {\\n          return {\\n            controllerCheckbox: CheckboxState.checked,\\n            checkbox1: CheckboxState.checked,\\n            checkbox2: CheckboxState.checked,\\n            checkbox3: CheckboxState.checked,\\n            checkbox4: CheckboxState.checked,\\n            checkbox5: CheckboxState.checked,\\n          }\\n        }\\n        return {\\n          ...state,\\n          [action.payload]: CheckboxState.checked,\\n          controllerCheckbox: areAllChecked(state)\\n            ? CheckboxState.checked\\n            : CheckboxState.indeterminate,\\n        }\\n      }\\n      case \\'uncheck\\': {\\n        if (action.payload === \\'controllerCheckbox\\') {\\n          return {\\n            controllerCheckbox: CheckboxState.unchecked,\\n            checkbox1: CheckboxState.unchecked,\\n            checkbox2: CheckboxState.unchecked,\\n            checkbox3: CheckboxState.unchecked,\\n            checkbox4: CheckboxState.unchecked,\\n            checkbox5: CheckboxState.unchecked,\\n          }\\n        }\\n        return {\\n          ...state,\\n          [action.payload]: CheckboxState.unchecked,\\n          controllerCheckbox: areAllUnchecked(state)\\n            ? CheckboxState.unchecked\\n            : CheckboxState.indeterminate,\\n        }\\n      }\\n      default:\\n        throw new Error()\\n    }\\n  }\\n  const initialState = {\\n    controllerCheckbox: CheckboxState.indeterminate,\\n    checkbox1: CheckboxState.checked,\\n    checkbox2: CheckboxState.checked,\\n    checkbox3: CheckboxState.unchecked,\\n    checkbox4: CheckboxState.checked,\\n    checkbox5: CheckboxState.unchecked,\\n  }\\n  const [state, dispatch] = useReducer(reducer, initialState)\\n  return (\\n    <Fieldset heading=\\\"Group label *\\\">\\n      <Checkbox\\n        aria-controls=\\\"checkbox1 checkbox2 checkbox3 checkbox4 checkbox5\\\"\\n        id=\\\"controllerCheckbox\\\"\\n        label=\\\"Label\\\"\\n        indeterminate={\\n          state.controllerCheckbox === CheckboxState.indeterminate\\n        }\\n        checked={state.controllerCheckbox === CheckboxState.checked}\\n        style={{ marginTop: \\'var(--spacing-xs)\\' }}\\n        onChange={() => {\\n          if (\\n            state.controllerCheckbox === CheckboxState.unchecked ||\\n            state.controllerCheckbox === CheckboxState.indeterminate\\n          ) {\\n            dispatch({ type: \\'check\\', payload: \\'controllerCheckbox\\' })\\n          } else {\\n            dispatch({ type: \\'uncheck\\', payload: \\'controllerCheckbox\\' })\\n          }\\n        }}\\n      />\\n      <ul style={{ marginLeft: \\'var(--spacing-s)\\', paddingInlineStart: \\'0\\' }}>\\n        {Object.entries(state).map(entry => {\\n          if (entry[0] === \\'controllerCheckbox\\') {\\n            return null\\n          }\\n          return (\\n            <li\\n              key={entry[0]}\\n              style={{ marginTop: \\'var(--spacing-s)\\', listStyle: \\'none\\' }}\\n            >\\n              <Checkbox\\n                id={entry[0]}\\n                key={entry[0]}\\n                label=\\\"Label\\\"\\n                checked={entry[1] === CheckboxState.checked}\\n                onChange={() => {\\n                  if (entry[1] === CheckboxState.unchecked) {\\n                    dispatch({ type: \\'check\\', payload: entry[0] })\\n                  } else {\\n                    dispatch({ type: \\'uncheck\\', payload: entry[0] })\\n                  }\\n                }}\\n              />\\n            </li>\\n          )\\n        })}\\n      </ul>\\n    </Fieldset>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useReducer,\n      Checkbox,\n      SelectionGroup,\n      StatusLabel,\n      Fieldset,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const CheckboxState = {\n          checked: 0,\n          unchecked: 1,\n          indeterminate: 2\n        };\n\n        const areAllChecked = state => {\n          let checkedCount = 0;\n          Object.keys(state).forEach(key => {\n            if (key === 'controllerCheckbox') {\n              return;\n            }\n\n            if (state[key] === CheckboxState.checked) {\n              checkedCount += 1;\n            }\n          });\n          return checkedCount === 4;\n        };\n\n        const areAllUnchecked = state => {\n          let checkedCount = 0;\n          Object.keys(state).forEach(key => {\n            if (key === 'controllerCheckbox') {\n              return;\n            }\n\n            if (state[key] === CheckboxState.checked) {\n              checkedCount += 1;\n            }\n          });\n          return checkedCount === 1;\n        };\n\n        const reducer = (state, action) => {\n          switch (action.type) {\n            case 'check':\n              {\n                if (action.payload === 'controllerCheckbox') {\n                  return {\n                    controllerCheckbox: CheckboxState.checked,\n                    checkbox1: CheckboxState.checked,\n                    checkbox2: CheckboxState.checked,\n                    checkbox3: CheckboxState.checked,\n                    checkbox4: CheckboxState.checked,\n                    checkbox5: CheckboxState.checked\n                  };\n                }\n\n                return { ...state,\n                  [action.payload]: CheckboxState.checked,\n                  controllerCheckbox: areAllChecked(state) ? CheckboxState.checked : CheckboxState.indeterminate\n                };\n              }\n\n            case 'uncheck':\n              {\n                if (action.payload === 'controllerCheckbox') {\n                  return {\n                    controllerCheckbox: CheckboxState.unchecked,\n                    checkbox1: CheckboxState.unchecked,\n                    checkbox2: CheckboxState.unchecked,\n                    checkbox3: CheckboxState.unchecked,\n                    checkbox4: CheckboxState.unchecked,\n                    checkbox5: CheckboxState.unchecked\n                  };\n                }\n\n                return { ...state,\n                  [action.payload]: CheckboxState.unchecked,\n                  controllerCheckbox: areAllUnchecked(state) ? CheckboxState.unchecked : CheckboxState.indeterminate\n                };\n              }\n\n            default:\n              throw new Error();\n          }\n        };\n\n        const initialState = {\n          controllerCheckbox: CheckboxState.indeterminate,\n          checkbox1: CheckboxState.checked,\n          checkbox2: CheckboxState.checked,\n          checkbox3: CheckboxState.unchecked,\n          checkbox4: CheckboxState.checked,\n          checkbox5: CheckboxState.unchecked\n        };\n        const [state, dispatch] = useReducer(reducer, initialState);\n        return <Fieldset heading=\"Group label *\" mdxType=\"Fieldset\">\n      <Checkbox aria-controls=\"checkbox1 checkbox2 checkbox3 checkbox4 checkbox5\" id=\"controllerCheckbox\" label=\"Label\" indeterminate={state.controllerCheckbox === CheckboxState.indeterminate} checked={state.controllerCheckbox === CheckboxState.checked} style={{\n            marginTop: 'var(--spacing-xs)'\n          }} onChange={() => {\n            if (state.controllerCheckbox === CheckboxState.unchecked || state.controllerCheckbox === CheckboxState.indeterminate) {\n              dispatch({\n                type: 'check',\n                payload: 'controllerCheckbox'\n              });\n            } else {\n              dispatch({\n                type: 'uncheck',\n                payload: 'controllerCheckbox'\n              });\n            }\n          }} mdxType=\"Checkbox\" />\n      <ul style={{\n            marginLeft: 'var(--spacing-s)',\n            paddingInlineStart: '0'\n          }}>\n        {Object.entries(state).map(entry => {\n              if (entry[0] === 'controllerCheckbox') {\n                return null;\n              }\n\n              return <li key={entry[0]} style={{\n                marginTop: 'var(--spacing-s)',\n                listStyle: 'none'\n              }}>\n              <Checkbox id={entry[0]} key={entry[0]} label=\"Label\" checked={entry[1] === CheckboxState.checked} onChange={() => {\n                  if (entry[1] === CheckboxState.unchecked) {\n                    dispatch({\n                      type: 'check',\n                      payload: entry[0]\n                    });\n                  } else {\n                    dispatch({\n                      type: 'uncheck',\n                      payload: entry[0]\n                    });\n                  }\n                }} mdxType=\"Checkbox\" />\n            </li>;\n            })}\n      </ul>\n    </Fieldset>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example-2\"\n    }}>{`Core code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<script>\n  function setIndeterminate() {\n    var checkbox = document.querySelector('#checkboxparent');\n    checkbox.indeterminate = true;\n  }\n  function preventDefault(event) {\n    event.preventDefault();\n  }\n</script>\n<div onload=\"setIndeterminate()\" class=\"hds-checkbox\" onclick=\"preventDefault(event)\">\n  <input\n    type=\"checkbox\"\n    id=\"checkboxparent\"\n    name=\"checkboxparent\"\n    class=\"hds-checkbox__input\"\n  />\n  <label for=\"checkboxparent\"  class=\"hds-checkbox__label\">Label</label>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example-2\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  const CheckboxState = {\n    checked: 0,\n    unchecked: 1,\n    indeterminate: 2,\n  };\n  const areAllChecked = (state) => {\n    let checkedCount = 0;\n    Object.keys(state).forEach((key) => {\n      if (key === 'controllerCheckbox') {\n        return;\n      }\n      if (state[key] === CheckboxState.checked) {\n        checkedCount += 1;\n      }\n    });\n    return checkedCount === 4;\n  };\n  const areAllUnchecked = (state) => {\n    let checkedCount = 0;\n    Object.keys(state).forEach((key) => {\n      if (key === 'controllerCheckbox') {\n        return;\n      }\n      if (state[key] === CheckboxState.checked) {\n        checkedCount += 1;\n      }\n    });\n    return checkedCount === 1;\n  };\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'check': {\n        if (action.payload === 'controllerCheckbox') {\n          return {\n            controllerCheckbox: CheckboxState.checked,\n            checkbox1: CheckboxState.checked,\n            checkbox2: CheckboxState.checked,\n            checkbox3: CheckboxState.checked,\n            checkbox4: CheckboxState.checked,\n            checkbox5: CheckboxState.checked,\n          };\n        }\n        return {\n          ...state,\n          [action.payload]: CheckboxState.checked,\n          controllerCheckbox: areAllChecked(state) ? CheckboxState.checked : CheckboxState.indeterminate,\n        };\n      }\n      case 'uncheck': {\n        if (action.payload === 'controllerCheckbox') {\n          return {\n            controllerCheckbox: CheckboxState.unchecked,\n            checkbox1: CheckboxState.unchecked,\n            checkbox2: CheckboxState.unchecked,\n            checkbox3: CheckboxState.unchecked,\n            checkbox4: CheckboxState.unchecked,\n            checkbox5: CheckboxState.unchecked,\n          };\n        }\n        return {\n          ...state,\n          [action.payload]: CheckboxState.unchecked,\n          controllerCheckbox: areAllUnchecked(state) ? CheckboxState.unchecked : CheckboxState.indeterminate,\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const initialState = {\n    controllerCheckbox: CheckboxState.unchecked,\n    checkbox1: CheckboxState.unchecked,\n    checkbox2: CheckboxState.unchecked,\n    checkbox3: CheckboxState.unchecked,\n    checkbox4: CheckboxState.unchecked,\n    checkbox5: CheckboxState.unchecked,\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Fieldset heading=\"Group label *\">\n      <Checkbox\n        aria-controls=\"checkbox1 checkbox2 checkbox3 checkbox4 checkbox5\"\n        id=\"controllerCheckbox\"\n        label=\"Label\"\n        indeterminate={state.controllerCheckbox === CheckboxState.indeterminate}\n        checked={state.controllerCheckbox === CheckboxState.checked}\n        style={{ marginTop: 'var(--spacing-xs)' }}\n        onChange={() => {\n          if (\n            state.controllerCheckbox === CheckboxState.unchecked ||\n            state.controllerCheckbox === CheckboxState.indeterminate\n          ) {\n            dispatch({ type: 'check', payload: 'controllerCheckbox' });\n          } else {\n            dispatch({ type: 'uncheck', payload: 'controllerCheckbox' });\n          }\n        }}\n      />\n      <ul style={{ marginLeft: 'var(--spacing-s)', paddingInlineStart: '0' }}>\n        {Object.entries(state).map((entry) => {\n          if (entry[0] === 'controllerCheckbox') {\n            return null;\n          }\n          return (\n            <li key={entry[0]} style={{ marginTop: 'var(--spacing-s)', listStyle: 'none' }}>\n              <Checkbox\n                id={entry[0]}\n                key={entry[0]}\n                label=\"Label\"\n                checked={entry[1] === CheckboxState.checked}\n                onChange={() => {\n                  if (entry[1] === CheckboxState.unchecked) {\n                    dispatch({ type: 'check', payload: entry[0] });\n                  } else {\n                    dispatch({ type: 'uncheck', payload: entry[0] });\n                  }\n                }}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </Fieldset>\n  );\n}}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos--api\"\n    }}>{`Demos & API`}</h2>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/core/?path=/story/components-checkbox--default\"\n      }}>{`Checkboxes in hds-core`}</a></p>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-checkbox--default\"\n      }}>{`Checkboxes in hds-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/components-checkbox--default\"\n      }}>{`Checkbox API`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}