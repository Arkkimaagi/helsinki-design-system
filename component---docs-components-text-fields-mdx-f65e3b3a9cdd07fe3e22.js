(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{opbm:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return x})),a.d(t,"default",(function(){return T}));var n=a("cxan"),l=a("+wNj"),i=(a("ERkP"),a("ZVZ0")),o=a("9Rvw"),r=a("qbsg"),s=a("gW3n"),p=a("t8yA"),d=a("E4D+"),c=a("sQ7B"),u=a("vD+s"),b=a("x0e6"),x=(a("l1C2"),{});void 0!==x&&x&&x===Object(x)&&Object.isExtensible(x)&&!x.hasOwnProperty("__filemeta")&&Object.defineProperty(x,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/components/text_fields.mdx"}});var h={_frontmatter:x},m=o.a;function T(e){var t,a,T,f,v=e.components,O=Object(l.a)(e,["components"]);return Object(i.b)(m,Object(n.a)({},h,O,{components:v,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"text-fields"},"Text fields"),Object(i.b)(s.a,{type:"info",mdxType:"StatusLabel"},"Stable"),Object(i.b)(u.a,{mdxType:"LargeParagraph"},"A text field is an input field that the user can interact with and input content and data. The user can also be provided with helper text if needed. Text inputs are used for shorter information while Text areas can be used for multiline answers."),Object(i.b)("h2",{id:"principles"},"Principles"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"A label should always be provided with a text field.")," Only exception to this is the search field which can be identified from the magnifying glass icon."),Object(i.b)("li",{parentName:"ul"},"Use a text input when a single line of text is expected. For multiline inputs, use a text area."),Object(i.b)("li",{parentName:"ul"},"Allow the text input to reflect the length of the content you expect the user to enter."),Object(i.b)("li",{parentName:"ul"},"If possible, add programmatic assistance. Detect and pre-fill inputs to reduce errors and save time. Use sentence-case for default values, detected values, and auto-completion text."),Object(i.b)("li",{parentName:"ul"},"If possible, do input validation in client-side real time and provide the user with immediate feedback."),Object(i.b)("li",{parentName:"ul"},"If possible, be forgiving of different input formats and small mistakes. It can greatly increase user experience of your product if you can fix common mistakes for the user."),Object(i.b)("li",{parentName:"ul"},"To decrease cognitive load of the user, it is recommended to mark all required fields. Remember to provide explanation of the required field indicator at the top of your form.")),Object(i.b)("h2",{id:"accessibility"},"Accessibility"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Placeholder text can be used to give hints and examples to the user what should be entered to the field. ",Object(i.b)("strong",{parentName:"li"},"However, all assistive technologies do not threat placeholder texts as labels and therefore they may ignore them completely.")," Aim to provide the sufficient information to fill the input in the label."),Object(i.b)("li",{parentName:"ul"},"In the case of an erroneous input, aim to provide clear instructions to the user how to correct the mistake. Always provide text description of the error.")),Object(i.b)("h2",{id:"usage-and-variations"},"Usage and variations"),Object(i.b)("h3",{id:"text-input"},"Text input"),Object(i.b)("p",null,"Text input serves in most use cases when the user needs to enter information. Text input works well for short inputs that fit in one line and are not longer than one sentence."),Object(i.b)(r.c,{__position:2,__code:'<TextInput\n  id="input"\n  label="Label"\n  placeholder="Placeholder"\n  helperText="Assistive text"\n  required\n/>\n<TextInput\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Assistive text"\n  style={{ marginTop: \'var(--spacing-s)\' }}\n  disabled\n/>\n<TextInput\n  id="input-invalid"\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Error text"\n  style={{ marginTop: \'var(--spacing-s)\' }}\n  invalid\n/>',__scope:(t={props:O,DefaultLayout:o.a,Playground:r.c,TextArea:p.a,TextInput:d.a,StatusLabel:s.a,ColorBox:c.a,LargeParagraph:u.a,Text:b.a},t.DefaultLayout=o.a,t._frontmatter=x,t),mdxType:"Playground"},Object(i.b)(d.a,{id:"input",label:"Label",placeholder:"Placeholder",helperText:"Assistive text",required:!0,mdxType:"TextInput"}),Object(i.b)(d.a,{label:"Label",defaultValue:"Text input value",helperText:"Assistive text",style:{marginTop:"var(--spacing-s)"},disabled:!0,mdxType:"TextInput"}),Object(i.b)(d.a,{id:"input-invalid",label:"Label",defaultValue:"Text input value",helperText:"Error text",style:{marginTop:"var(--spacing-s)"},invalid:!0,mdxType:"TextInput"})),Object(i.b)("h4",{id:"core-code-example"},"Core code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'\x3c!-- Enabled  --\x3e\n<div class="hds-text-input">\n  <label for="input" class="hds-text-input__label">\n    Label\n    <span class="hds-text-input__required">*</span>\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" class="hds-text-input__input" type="text" placeholder="Placeholder" required />\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n\n\x3c!-- Disabled --\x3e\n<div class="hds-text-input">\n  <label for="input" class="hds-text-input__label">\n    Label\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" class="hds-text-input__input" type="text" value="Text input value" disabled />\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n\n\x3c!-- Error --\x3e\n<div class="hds-text-input hds-text-input--invalid">\n  <label for="input" class="hds-text-input__label">\n    Label\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" class="hds-text-input__input" type="text" value="Text input value" />\n  </div>\n  <span class="hds-text-input__helper-text">Error text</span>\n</div>\n')),Object(i.b)("h4",{id:"react-code-example"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'/* Enabled */\n<TextInput\n  id="input"\n  label="Label"\n  placeholder="Placeholder"\n  helperText="Assistive text"\n  required\n/>\n\n/* Disabled */\n<TextInput\n  id="input"\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Assistive text"\n  disabled\n/>\n\n/* Error */\n<TextInput\n  id="input"\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Error text"\n  invalid\n/>\n')),Object(i.b)("h3",{id:"text-area"},"Text area"),Object(i.b)("p",null,"Text area is meant for situations where inputted text is multiline or contains more than one sentence."),Object(i.b)(r.c,{__position:3,__code:'<TextArea\n  id="textarea"\n  label="Label"\n  placeholder="Placeholder"\n  helperText="Assistive text"\n  required\n/>\n<TextArea\n  label="Label"\n  defaultValue="Text area value"\n  helperText="Assistive text"\n  style={{ marginTop: \'var(--spacing-s)\' }}\n  disabled\n/>\n<TextArea\n  id="textarea-invalid"\n  label="Label"\n  defaultValue="Text area value"\n  helperText="Error text"\n  style={{ marginTop: \'var(--spacing-s)\' }}\n  invalid\n/>',__scope:(a={props:O,DefaultLayout:o.a,Playground:r.c,TextArea:p.a,TextInput:d.a,StatusLabel:s.a,ColorBox:c.a,LargeParagraph:u.a,Text:b.a},a.DefaultLayout=o.a,a._frontmatter=x,a),mdxType:"Playground"},Object(i.b)(p.a,{id:"textarea",label:"Label",placeholder:"Placeholder",helperText:"Assistive text",required:!0,mdxType:"TextArea"}),Object(i.b)(p.a,{label:"Label",defaultValue:"Text area value",helperText:"Assistive text",style:{marginTop:"var(--spacing-s)"},disabled:!0,mdxType:"TextArea"}),Object(i.b)(p.a,{id:"textarea-invalid",label:"Label",defaultValue:"Text area value",helperText:"Error text",style:{marginTop:"var(--spacing-s)"},invalid:!0,mdxType:"TextArea"})),Object(i.b)("h4",{id:"core-code-example-1"},"Core code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'\x3c!-- Enabled  --\x3e\n<div class="hds-text-input">\n  <label for="textarea" class="hds-text-input__label">\n    Label\n    <span class="hds-text-input__required">*</span>\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <textarea id="textarea" class="hds-text-input__input" placeholder="Placeholder" required></textarea>\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n\n\x3c!-- Disabled --\x3e\n<div class="hds-text-input">\n  <label for="textarea" class="hds-text-input__label">\n    Label\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <textarea id="textarea" class="hds-text-input__input" disabled>\n      Text area value\n    </textarea>\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n\n\x3c!-- Error --\x3e\n<div class="hds-text-input hds-text-input--invalid">\n  <label for="textarea" class="hds-text-input__label">\n    Label\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <textarea id="textarea" class="hds-text-input__input">\n      Text area value\n    </textarea>\n  </div>\n  <span class="hds-text-input__helper-text">Error text</span>\n</div>\n')),Object(i.b)("h4",{id:"react-code-example-1"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'/* Enabled */\n<TextArea\n  id="textarea"\n  label="Label"\n  placeholder="Placeholder"\n  helperText="Assistive text"\n  required\n/>\n\n/* Disabled */\n<TextArea\n  id="textarea"\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Assistive text"\n  disabled\n/>\n\n/* Error */\n<TextArea\n  id="textarea"\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Error text"\n  invalid\n/>\n')),Object(i.b)("h3",{id:"read-only"},"Read-only"),Object(i.b)("p",null,"Read-only text input is used to indicate an input among other inputs that cannot be edited. This is needed in situations where, for example, the information has been gathered from other source and filled automatically. Read-only fields should not be confused with disabled text fields. Disabled text fields are used when there is an action the user can make to activate the field. Read-only text fields will stay uneditable in the same view."),Object(i.b)(r.c,{__position:4,__code:'<TextInput\n  label="Label"\n  defaultValue="Read-only value"\n  helperText="Assistive text"\n  readOnly\n/>',__scope:(T={props:O,DefaultLayout:o.a,Playground:r.c,TextArea:p.a,TextInput:d.a,StatusLabel:s.a,ColorBox:c.a,LargeParagraph:u.a,Text:b.a},T.DefaultLayout=o.a,T._frontmatter=x,T),mdxType:"Playground"},Object(i.b)(d.a,{label:"Label",defaultValue:"Read-only value",helperText:"Assistive text",readOnly:!0,mdxType:"TextInput"})),Object(i.b)("h4",{id:"core-code-example-2"},"Core code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<div class="hds-text-input">\n  <label for="input" class="hds-text-input__label">\n    Label\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" class="hds-text-input__input" type="text" value="Text input value" readonly />\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n')),Object(i.b)("h4",{id:"react-code-example-2"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'<TextInput\n  id="textarea"\n  label="Label"\n  defaultValue="Text input value"\n  helperText="Assistive text"\n  readOnly\n/>\n')),Object(i.b)("h3",{id:"with-tooltip"},"With tooltip"),Object(i.b)("p",null,"Both text input and text area can be provided with additional tooltip. Tooltip information should be considered as extra information, for example, why this information is gathered or how is it used. The user should have sufficient information on how to fill the input field in label and assistive text. You can find more information about Tooltips how they are used from the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/components/tooltip"}),"Tooltip documentation page"),"."),Object(i.b)(r.c,{__position:5,__code:'<TextInput\n  id="input-tooltip"\n  label="Label"\n  placeholder="Placeholder"\n  tooltipLabel="Tooltip label"\n  tooltipButtonLabel="Tooltip button label"\n  tooltipText=\'Tooltips contain "nice to have" information. Default Tooltip contents should not be longer than two to three sentences. For longer descriptions, provide a link to a separate page.\'\n/>\n<TextArea\n  id="textarea-tooltip"\n  label="Label"\n  placeholder="Placeholder"\n  tooltipLabel="Tooltip label"\n  tooltipButtonLabel="Tooltip button label"\n  tooltipText=\'Tooltips contain "nice to have" information. Default Tooltip contents should not be longer than two to three sentences. For longer descriptions, provide a link to a separate page.\'\n  style={{ marginTop: \'var(--spacing-s)\' }}\n/>',__scope:(f={props:O,DefaultLayout:o.a,Playground:r.c,TextArea:p.a,TextInput:d.a,StatusLabel:s.a,ColorBox:c.a,LargeParagraph:u.a,Text:b.a},f.DefaultLayout=o.a,f._frontmatter=x,f),mdxType:"Playground"},Object(i.b)(d.a,{id:"input-tooltip",label:"Label",placeholder:"Placeholder",tooltipLabel:"Tooltip label",tooltipButtonLabel:"Tooltip button label",tooltipText:'Tooltips contain "nice to have" information. Default Tooltip contents should not be longer than two to three sentences. For longer descriptions, provide a link to a separate page.',mdxType:"TextInput"}),Object(i.b)(p.a,{id:"textarea-tooltip",label:"Label",placeholder:"Placeholder",tooltipLabel:"Tooltip label",tooltipButtonLabel:"Tooltip button label",tooltipText:'Tooltips contain "nice to have" information. Default Tooltip contents should not be longer than two to three sentences. For longer descriptions, provide a link to a separate page.',style:{marginTop:"var(--spacing-s)"},mdxType:"TextArea"})),Object(i.b)("h4",{id:"react-code-example-3"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'/* Text input */\n<TextInput\n  id="input"\n  label="Label"\n  placeholder="Placeholder"\n  tooltipLabel="Tooltip label"\n  tooltipButtonLabel="Tooltip button label"\n  tooltipText="Tooltips contain &quot;nice to have&quot; information. Default Tooltip contents should not be longer than two to three sentences. For longer descriptions, provide a link to a separate page."\n/>\n\n/* Text area */\n<TextArea\n  id="textarea"\n  label="Label"\n  placeholder="Placeholder"\n  tooltipLabel="Tooltip label"\n  tooltipButtonLabel="Tooltip button label"\n  tooltipText="Tooltips contain &quot;nice to have&quot; information. Default Tooltip contents should not be longer than two to three sentences. For longer descriptions, provide a link to a separate page."\n/>\n')),Object(i.b)("h2",{id:"demos--api"},"Demos & API"),Object(i.b)("h3",{id:"core"},"Core"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/storybook/core/?path=/story/components-text-input--default"}),"Text inputs in hds-core")),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/storybook/core/?path=/story/components-textarea--default"}),"Text areas in hds-core")),Object(i.b)("h3",{id:"react"},"React"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/storybook/react/?path=/story/components-textinput--default"}),"Text inputs in hds-react")),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/storybook/react/?path=/docs/components-textinput--default"}),"TextInput API")),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/storybook/react/?path=/story/components-textarea--default"}),"Text areas in hds-react")),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/storybook/react/?path=/docs/components-textarea--default"}),"TextArea API")))}void 0!==T&&T&&T===Object(T)&&Object.isExtensible(T)&&!T.hasOwnProperty("__filemeta")&&Object.defineProperty(T,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/components/text_fields.mdx"}}),T.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-components-text-fields-mdx-f65e3b3a9cdd07fe3e22.js.map