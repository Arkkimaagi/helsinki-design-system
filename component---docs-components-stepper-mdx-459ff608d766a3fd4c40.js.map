{"version":3,"sources":["webpack:///../docs/components/stepper.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","style","marginLeft","label","className","href","parentName","__position","__code","__scope","useReducer","Playground","StatusLabel","Notification","Stepper","Button","StepState","IconArrowLeft","IconArrowRight","LargeParagraph","Link","stepsTotal","reducer","state","action","activeStepIndex","payload","steps","map","step","index","completed","available","Error","initialState","disabled","dispatch","lastStep","length","language","selectedStep","onStepClick","event","stepIndex","display","justifyContent","alignItems","gap","variant","onClick","height","width","iconLeft","iconRight","undefined","maxWidth","small","headingClassName","stepHeading","attention","paused","isMDXComponent"],"mappings":"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","file":"component---docs-components-stepper-mdx-459ff608d766a3fd4c40.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/helsinki-design-system/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useReducer } from 'react';\nimport { Playground } from \"docz\";\nimport { StatusLabel, Notification, Stepper, Button } from \"hds-react\";\nimport { StepState } from \"hds-react\";\nimport { IconArrowLeft, IconArrowRight } from \"hds-react\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Link from \"../../src/components/Link\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"stepper\"\n    }}>{`Stepper`}</h1>\n    <StatusLabel type=\"alert\" mdxType=\"StatusLabel\">Draft</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">Accessible</StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n    If a form is divided into multiple pages or steps, the Form progress component helps the user to understand the progression and to navigate between form steps.\n    </LargeParagraph>\n    <Notification label=\"Note about multi-page forms!\" className=\"siteNotification\" mdxType=\"Notification\">\n  This documentation page is about HDS multi-page stepper component. If you are looking for documentation about building multi-page forms, please refer to <a href=\"/patterns/form-multi-page\">HDS multi-page form pattern documentation page</a>.\n    </Notification>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Each form step must be given a clear and descriptive label.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The label is required even if it is visually hidden on smaller screen sizes.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`It is recommended that the form steps must be filled in order.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This means that steps are disabled until their previous step is completed successfully.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Avoid using a stepper in short forms. One step should have at least three (3) form components inside it.`}</li>\n      <li parentName=\"ul\">{`Use `}<a parentName=\"li\" {...{\n          \"href\": \"#small\"\n        }}>{`small variant`}</a>{` on small screens or spaces.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can use the default variant on small screens if the amount of steps is small (2-4 steps).`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Do not span the stepper into multiple rows. If you are running out of space, consider using `}<a parentName=\"li\" {...{\n          \"href\": \"#small\"\n        }}>{`the small variant`}</a>{` or alter the spacing between steps.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`HDS stepper also supports scrolling when it overflows outside the container. Generally, this should be the last resort option if it is not possible to fit the stepper on screen with other methods.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`You can find an example of creating a complete form with the stepper in `}<Link href=\"/storybook/react/?path=/docs/components-stepper--simple-form-example#simple-form-example\" mdxType=\"Link\">{`the HDS React Storybook`}</Link>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`It is advisable to use colour combinations provided by the implementation.`}</strong>{` These combinations are ensured to comply with WCAG AA requirements. When customising colours, refer to `}<a parentName=\"li\" {...{\n          \"href\": \"/design-tokens/colour\",\n          \"title\": \"Colour\"\n        }}>{`colour guidelines`}</a>{` to ensure accessibility.`}</li>\n      <li parentName=\"ul\">{`Note that the step label is a mandatory property. This label will be set as the `}<inlineCode parentName=\"li\">{`aria-label`}</inlineCode>{` of the step.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This label will also be in the step heading element below the stepper.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Each form step should have a heading element of the correct level. It is recommended to use `}<inlineCode parentName=\"li\">{`stepHeading`}</inlineCode>{` property to render the heading automatically.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If you render the step heading separately, make sure the focus is moved to that heading when the user is moving between steps. This has been taken care of for you if you use the `}<inlineCode parentName=\"li\">{`stepHeading`}</inlineCode>{` variant.`}</li>\n          <li parentName=\"ul\">{`You can control the aria level of the heading with the `}<inlineCode parentName=\"li\">{`stepHeadingAriaLevel`}</inlineCode>{` property.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage--variations\"\n    }}>{`Usage & variations`}</h2>\n    <h3 {...{\n      \"id\": \"default\"\n    }}>{`Default`}</h3>\n    <p>{`The default stepper variant includes visible step labels. The stepper can be navigated by pressing the steps themselves or controlled via external button elements.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const commonReducer = stepsTotal => (state, action) => {\\n    switch (action.type) {\\n      case \\'completeStep\\': {\\n        const activeStepIndex =\\n          action.payload === stepsTotal - 1\\n            ? stepsTotal - 1\\n            : action.payload + 1\\n        return {\\n          activeStepIndex,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload && index !== stepsTotal - 1) {\\n              // current one but not last one\\n              return {\\n                state: StepState.completed,\\n                label: step.label,\\n              }\\n            }\\n            if (index === action.payload + 1) {\\n              // next one\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      case \\'setActive\\': {\\n        return {\\n          activeStepIndex: action.payload,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload) {\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      default:\\n        throw new Error()\\n    }\\n  }\\n  const reducer = commonReducer(5)\\n  const initialState = {\\n    activeStepIndex: 0,\\n    steps: [\\n      {\\n        label: \\'Step 1\\',\\n        state: StepState.available,\\n      },\\n      {\\n        label: \\'Step 2\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 3\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 4 - longer text\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 5\\',\\n        state: StepState.disabled,\\n      },\\n    ],\\n  }\\n  const [state, dispatch] = useReducer(reducer, initialState)\\n  const lastStep = state.activeStepIndex === state.steps.length - 1\\n  return (\\n    <div>\\n      <Stepper\\n        className=\\\"stepper-default\\\"\\n        steps={state.steps}\\n        language=\\\"en\\\"\\n        selectedStep={state.activeStepIndex}\\n        onStepClick={(event, stepIndex) =>\\n          dispatch({ type: \\'setActive\\', payload: stepIndex })\\n        }\\n      />\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          justifyContent: \\'flex-start\\',\\n          alignItems: \\'flex-end\\',\\n          gap: \\'24px\\',\\n        }}\\n      >\\n        <Button\\n          disabled={state.activeStepIndex === 0}\\n          variant=\\\"secondary\\\"\\n          onClick={() =>\\n            dispatch({\\n              type: \\'setActive\\',\\n              payload: state.activeStepIndex - 1,\\n            })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconLeft={<IconArrowLeft />}\\n        >\\n          Previous\\n        </Button>\\n        <Button\\n          variant={lastStep ? \\'primary\\' : \\'secondary\\'}\\n          onClick={() =>\\n            dispatch({ type: \\'completeStep\\', payload: state.activeStepIndex })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconRight={lastStep ? undefined : <IconArrowRight />}\\n        >\\n          {lastStep ? \\'Send\\' : \\'Next\\'}\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useReducer,\n      Playground,\n      StatusLabel,\n      Notification,\n      Stepper,\n      Button,\n      StepState,\n      IconArrowLeft,\n      IconArrowRight,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const commonReducer = stepsTotal => (state, action) => {\n          switch (action.type) {\n            case 'completeStep':\n              {\n                const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n                return {\n                  activeStepIndex,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload && index !== stepsTotal - 1) {\n                      // current one but not last one\n                      return {\n                        state: StepState.completed,\n                        label: step.label\n                      };\n                    }\n\n                    if (index === action.payload + 1) {\n                      // next one\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            case 'setActive':\n              {\n                return {\n                  activeStepIndex: action.payload,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload) {\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            default:\n              throw new Error();\n          }\n        };\n\n        const reducer = commonReducer(5);\n        const initialState = {\n          activeStepIndex: 0,\n          steps: [{\n            label: 'Step 1',\n            state: StepState.available\n          }, {\n            label: 'Step 2',\n            state: StepState.disabled\n          }, {\n            label: 'Step 3',\n            state: StepState.disabled\n          }, {\n            label: 'Step 4 - longer text',\n            state: StepState.disabled\n          }, {\n            label: 'Step 5',\n            state: StepState.disabled\n          }]\n        };\n        const [state, dispatch] = useReducer(reducer, initialState);\n        const lastStep = state.activeStepIndex === state.steps.length - 1;\n        return <div>\n      <Stepper className=\"stepper-default\" steps={state.steps} language=\"en\" selectedStep={state.activeStepIndex} onStepClick={(event, stepIndex) => dispatch({\n            type: 'setActive',\n            payload: stepIndex\n          })} mdxType=\"Stepper\" />\n      <div style={{\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'flex-end',\n            gap: '24px'\n          }}>\n        <Button disabled={state.activeStepIndex === 0} variant=\"secondary\" onClick={() => dispatch({\n              type: 'setActive',\n              payload: state.activeStepIndex - 1\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconLeft={<IconArrowLeft mdxType=\"IconArrowLeft\" />} mdxType=\"Button\">\n          Previous\n        </Button>\n        <Button variant={lastStep ? 'primary' : 'secondary'} onClick={() => dispatch({\n              type: 'completeStep',\n              payload: state.activeStepIndex\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconRight={lastStep ? undefined : <IconArrowRight mdxType=\"IconArrowRight\" />} mdxType=\"Button\">\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div>\n      <Stepper\n        className=\"stepper-default\"\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"small\"\n    }}>{`Small`}</h3>\n    <p>{`The small stepper variant omits the visible step labels. This variant of the stepper suits better for smaller screens or tight spaces. Steps are still interactable even though the labels are visually hidden.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const commonReducer = stepsTotal => (state, action) => {\\n    switch (action.type) {\\n      case \\'completeStep\\': {\\n        const activeStepIndex =\\n          action.payload === stepsTotal - 1\\n            ? stepsTotal - 1\\n            : action.payload + 1\\n        return {\\n          activeStepIndex,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload && index !== stepsTotal - 1) {\\n              // current one but not last one\\n              return {\\n                state: StepState.completed,\\n                label: step.label,\\n              }\\n            }\\n            if (index === action.payload + 1) {\\n              // next one\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      case \\'setActive\\': {\\n        return {\\n          activeStepIndex: action.payload,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload) {\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      default:\\n        throw new Error()\\n    }\\n  }\\n  const reducer = commonReducer(5)\\n  const initialState = {\\n    activeStepIndex: 0,\\n    steps: [\\n      {\\n        label: \\'Step 1\\',\\n        state: StepState.available,\\n      },\\n      {\\n        label: \\'Step 2\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 3\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 4 - longer text\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 5\\',\\n        state: StepState.disabled,\\n      },\\n    ],\\n  }\\n  const [state, dispatch] = useReducer(reducer, initialState)\\n  const lastStep = state.activeStepIndex === state.steps.length - 1\\n  return (\\n    <div\\n      style={{\\n        maxWidth: \\'480px\\',\\n      }}\\n    >\\n      <Stepper\\n        className=\\\"stepper-small\\\"\\n        steps={state.steps}\\n        language=\\\"en\\\"\\n        small\\n        selectedStep={state.activeStepIndex}\\n        onStepClick={(event, stepIndex) =>\\n          dispatch({ type: \\'setActive\\', payload: stepIndex })\\n        }\\n      />\\n      <div\\n        style={{\\n          height: \\'80px\\',\\n          display: \\'flex\\',\\n          justifyContent: \\'flex-start\\',\\n          alignItems: \\'flex-end\\',\\n          gap: \\'24px\\',\\n        }}\\n      >\\n        <Button\\n          disabled={state.activeStepIndex === 0}\\n          variant=\\\"secondary\\\"\\n          onClick={() =>\\n            dispatch({\\n              type: \\'setActive\\',\\n              payload: state.activeStepIndex - 1,\\n            })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconLeft={<IconArrowLeft />}\\n        >\\n          Previous\\n        </Button>\\n        <Button\\n          variant={lastStep ? \\'primary\\' : \\'secondary\\'}\\n          onClick={() =>\\n            dispatch({ type: \\'completeStep\\', payload: state.activeStepIndex })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconRight={lastStep ? undefined : <IconArrowRight />}\\n        >\\n          {lastStep ? \\'Send\\' : \\'Next\\'}\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useReducer,\n      Playground,\n      StatusLabel,\n      Notification,\n      Stepper,\n      Button,\n      StepState,\n      IconArrowLeft,\n      IconArrowRight,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const commonReducer = stepsTotal => (state, action) => {\n          switch (action.type) {\n            case 'completeStep':\n              {\n                const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n                return {\n                  activeStepIndex,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload && index !== stepsTotal - 1) {\n                      // current one but not last one\n                      return {\n                        state: StepState.completed,\n                        label: step.label\n                      };\n                    }\n\n                    if (index === action.payload + 1) {\n                      // next one\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            case 'setActive':\n              {\n                return {\n                  activeStepIndex: action.payload,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload) {\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            default:\n              throw new Error();\n          }\n        };\n\n        const reducer = commonReducer(5);\n        const initialState = {\n          activeStepIndex: 0,\n          steps: [{\n            label: 'Step 1',\n            state: StepState.available\n          }, {\n            label: 'Step 2',\n            state: StepState.disabled\n          }, {\n            label: 'Step 3',\n            state: StepState.disabled\n          }, {\n            label: 'Step 4 - longer text',\n            state: StepState.disabled\n          }, {\n            label: 'Step 5',\n            state: StepState.disabled\n          }]\n        };\n        const [state, dispatch] = useReducer(reducer, initialState);\n        const lastStep = state.activeStepIndex === state.steps.length - 1;\n        return <div style={{\n          maxWidth: '480px'\n        }}>\n      <Stepper className=\"stepper-small\" steps={state.steps} language=\"en\" small selectedStep={state.activeStepIndex} onStepClick={(event, stepIndex) => dispatch({\n            type: 'setActive',\n            payload: stepIndex\n          })} mdxType=\"Stepper\" />\n      <div style={{\n            height: '80px',\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'flex-end',\n            gap: '24px'\n          }}>\n        <Button disabled={state.activeStepIndex === 0} variant=\"secondary\" onClick={() => dispatch({\n              type: 'setActive',\n              payload: state.activeStepIndex - 1\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconLeft={<IconArrowLeft mdxType=\"IconArrowLeft\" />} mdxType=\"Button\">\n          Previous\n        </Button>\n        <Button variant={lastStep ? 'primary' : 'secondary'} onClick={() => dispatch({\n              type: 'completeStep',\n              payload: state.activeStepIndex\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconRight={lastStep ? undefined : <IconArrowRight mdxType=\"IconArrowRight\" />} mdxType=\"Button\">\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-1\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  // Check the commonReducer implementation in the Default variant example\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div \n      style={{\n        maxWidth: '480px'\n      }}\n    >\n      <Stepper\n        className=\"stepper-small\"\n        steps={state.steps}\n        language=\"en\"\n        small\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          height: '80px',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-step-heading\"\n    }}>{`With step heading`}</h3>\n    <p>{`The stepper can automatically render the step heading if the property `}<inlineCode parentName=\"p\">{`stepHeading`}</inlineCode>{` is enabled. The step heading will include the current step number, the total amount of steps, and the step label. `}</p>\n    <p>{`You can control the heading level of the generated step heading via the `}<inlineCode parentName=\"p\">{`stepHeadingAriaLevel`}</inlineCode>{` property. The heading is automatically localised if you change the component language with the `}<inlineCode parentName=\"p\">{`language`}</inlineCode>{` property.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const commonReducer = stepsTotal => (state, action) => {\\n    switch (action.type) {\\n      case \\'completeStep\\': {\\n        const activeStepIndex =\\n          action.payload === stepsTotal - 1\\n            ? stepsTotal - 1\\n            : action.payload + 1\\n        return {\\n          activeStepIndex,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload && index !== stepsTotal - 1) {\\n              // current one but not last one\\n              return {\\n                state: StepState.completed,\\n                label: step.label,\\n              }\\n            }\\n            if (index === action.payload + 1) {\\n              // next one\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      case \\'setActive\\': {\\n        return {\\n          activeStepIndex: action.payload,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload) {\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      default:\\n        throw new Error()\\n    }\\n  }\\n  const reducer = commonReducer(5)\\n  const initialState = {\\n    activeStepIndex: 0,\\n    steps: [\\n      {\\n        label: \\'Step 1\\',\\n        state: StepState.available,\\n      },\\n      {\\n        label: \\'Step 2\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 3\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 4 - longer text\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 5\\',\\n        state: StepState.disabled,\\n      },\\n    ],\\n  }\\n  const [state, dispatch] = useReducer(reducer, initialState)\\n  const lastStep = state.activeStepIndex === state.steps.length - 1\\n  return (\\n    <div>\\n      <Stepper\\n        className=\\\"stepper-with-heading\\\"\\n        headingClassName=\\\"stepper-heading\\\"\\n        steps={state.steps}\\n        language=\\\"en\\\"\\n        stepHeading\\n        selectedStep={state.activeStepIndex}\\n        onStepClick={(event, stepIndex) =>\\n          dispatch({ type: \\'setActive\\', payload: stepIndex })\\n        }\\n      />\\n      <div\\n        style={{\\n          height: \\'80px\\',\\n          display: \\'flex\\',\\n          justifyContent: \\'flex-start\\',\\n          alignItems: \\'flex-end\\',\\n          gap: \\'24px\\',\\n        }}\\n      >\\n        <Button\\n          disabled={state.activeStepIndex === 0}\\n          variant=\\\"secondary\\\"\\n          onClick={() =>\\n            dispatch({\\n              type: \\'setActive\\',\\n              payload: state.activeStepIndex - 1,\\n            })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconLeft={<IconArrowLeft />}\\n        >\\n          Previous\\n        </Button>\\n        <Button\\n          variant={lastStep ? \\'primary\\' : \\'secondary\\'}\\n          onClick={() =>\\n            dispatch({ type: \\'completeStep\\', payload: state.activeStepIndex })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconRight={lastStep ? undefined : <IconArrowRight />}\\n        >\\n          {lastStep ? \\'Send\\' : \\'Next\\'}\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useReducer,\n      Playground,\n      StatusLabel,\n      Notification,\n      Stepper,\n      Button,\n      StepState,\n      IconArrowLeft,\n      IconArrowRight,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const commonReducer = stepsTotal => (state, action) => {\n          switch (action.type) {\n            case 'completeStep':\n              {\n                const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n                return {\n                  activeStepIndex,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload && index !== stepsTotal - 1) {\n                      // current one but not last one\n                      return {\n                        state: StepState.completed,\n                        label: step.label\n                      };\n                    }\n\n                    if (index === action.payload + 1) {\n                      // next one\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            case 'setActive':\n              {\n                return {\n                  activeStepIndex: action.payload,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload) {\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            default:\n              throw new Error();\n          }\n        };\n\n        const reducer = commonReducer(5);\n        const initialState = {\n          activeStepIndex: 0,\n          steps: [{\n            label: 'Step 1',\n            state: StepState.available\n          }, {\n            label: 'Step 2',\n            state: StepState.disabled\n          }, {\n            label: 'Step 3',\n            state: StepState.disabled\n          }, {\n            label: 'Step 4 - longer text',\n            state: StepState.disabled\n          }, {\n            label: 'Step 5',\n            state: StepState.disabled\n          }]\n        };\n        const [state, dispatch] = useReducer(reducer, initialState);\n        const lastStep = state.activeStepIndex === state.steps.length - 1;\n        return <div>\n      <Stepper className=\"stepper-with-heading\" headingClassName=\"stepper-heading\" steps={state.steps} language=\"en\" stepHeading selectedStep={state.activeStepIndex} onStepClick={(event, stepIndex) => dispatch({\n            type: 'setActive',\n            payload: stepIndex\n          })} mdxType=\"Stepper\" />\n      <div style={{\n            height: '80px',\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'flex-end',\n            gap: '24px'\n          }}>\n        <Button disabled={state.activeStepIndex === 0} variant=\"secondary\" onClick={() => dispatch({\n              type: 'setActive',\n              payload: state.activeStepIndex - 1\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconLeft={<IconArrowLeft mdxType=\"IconArrowLeft\" />} mdxType=\"Button\">\n          Previous\n        </Button>\n        <Button variant={lastStep ? 'primary' : 'secondary'} onClick={() => dispatch({\n              type: 'completeStep',\n              payload: state.activeStepIndex\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconRight={lastStep ? undefined : <IconArrowRight mdxType=\"IconArrowRight\" />} mdxType=\"Button\">\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-2\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  // Check the commonReducer implementation in the Default variant example\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div>\n      <Stepper\n        className=\"stepper-with-heading\"\n        headingClassName=\"stepper-heading\"\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          height: '80px',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"overflow\"\n    }}>{`Overflow`}</h3>\n    <p>{`The stepper reacts accordingly when it overflows outside of the container. The user can scroll the stepper view or use left and right angle icons to browse the stepper.`}</p>\n    <p>{`This variant should only be the last resort option if it is not possible to fit the stepper on screen with other methods. Prefer the `}<inlineCode parentName=\"p\">{`small`}</inlineCode>{` variant or shorter labels as a solution before resorting to overflow.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const commonReducer = stepsTotal => (state, action) => {\\n    switch (action.type) {\\n      case \\'completeStep\\': {\\n        const activeStepIndex =\\n          action.payload === stepsTotal - 1\\n            ? stepsTotal - 1\\n            : action.payload + 1\\n        return {\\n          activeStepIndex,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload && index !== stepsTotal - 1) {\\n              // current one but not last one\\n              return {\\n                state: StepState.completed,\\n                label: step.label,\\n              }\\n            }\\n            if (index === action.payload + 1) {\\n              // next one\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      case \\'setActive\\': {\\n        return {\\n          activeStepIndex: action.payload,\\n          steps: state.steps.map((step, index) => {\\n            if (index === action.payload) {\\n              return {\\n                state: StepState.available,\\n                label: step.label,\\n              }\\n            }\\n            return step\\n          }),\\n        }\\n      }\\n      default:\\n        throw new Error()\\n    }\\n  }\\n  const reducer = commonReducer(5)\\n  const initialState = {\\n    activeStepIndex: 0,\\n    steps: [\\n      {\\n        label: \\'Step 1\\',\\n        state: StepState.available,\\n      },\\n      {\\n        label: \\'Step 2\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 3\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 4 - longer text\\',\\n        state: StepState.disabled,\\n      },\\n      {\\n        label: \\'Step 5\\',\\n        state: StepState.disabled,\\n      },\\n    ],\\n  }\\n  const [state, dispatch] = useReducer(reducer, initialState)\\n  const lastStep = state.activeStepIndex === state.steps.length - 1\\n  return (\\n    <div\\n      style={{\\n        maxWidth: \\'400px\\',\\n      }}\\n    >\\n      <Stepper\\n        className=\\\"stepper-overflow\\\"\\n        steps={state.steps}\\n        language=\\\"en\\\"\\n        selectedStep={state.activeStepIndex}\\n        onStepClick={(event, stepIndex) =>\\n          dispatch({ type: \\'setActive\\', payload: stepIndex })\\n        }\\n      />\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          justifyContent: \\'flex-start\\',\\n          alignItems: \\'flex-end\\',\\n          gap: \\'24px\\',\\n        }}\\n      >\\n        <Button\\n          disabled={state.activeStepIndex === 0}\\n          variant=\\\"secondary\\\"\\n          onClick={() =>\\n            dispatch({\\n              type: \\'setActive\\',\\n              payload: state.activeStepIndex - 1,\\n            })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconLeft={<IconArrowLeft />}\\n        >\\n          Previous\\n        </Button>\\n        <Button\\n          variant={lastStep ? \\'primary\\' : \\'secondary\\'}\\n          onClick={() =>\\n            dispatch({ type: \\'completeStep\\', payload: state.activeStepIndex })\\n          }\\n          style={{ height: \\'fit-content\\', width: \\'fit-content\\' }}\\n          iconRight={lastStep ? undefined : <IconArrowRight />}\\n        >\\n          {lastStep ? \\'Send\\' : \\'Next\\'}\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useReducer,\n      Playground,\n      StatusLabel,\n      Notification,\n      Stepper,\n      Button,\n      StepState,\n      IconArrowLeft,\n      IconArrowRight,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const commonReducer = stepsTotal => (state, action) => {\n          switch (action.type) {\n            case 'completeStep':\n              {\n                const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n                return {\n                  activeStepIndex,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload && index !== stepsTotal - 1) {\n                      // current one but not last one\n                      return {\n                        state: StepState.completed,\n                        label: step.label\n                      };\n                    }\n\n                    if (index === action.payload + 1) {\n                      // next one\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            case 'setActive':\n              {\n                return {\n                  activeStepIndex: action.payload,\n                  steps: state.steps.map((step, index) => {\n                    if (index === action.payload) {\n                      return {\n                        state: StepState.available,\n                        label: step.label\n                      };\n                    }\n\n                    return step;\n                  })\n                };\n              }\n\n            default:\n              throw new Error();\n          }\n        };\n\n        const reducer = commonReducer(5);\n        const initialState = {\n          activeStepIndex: 0,\n          steps: [{\n            label: 'Step 1',\n            state: StepState.available\n          }, {\n            label: 'Step 2',\n            state: StepState.disabled\n          }, {\n            label: 'Step 3',\n            state: StepState.disabled\n          }, {\n            label: 'Step 4 - longer text',\n            state: StepState.disabled\n          }, {\n            label: 'Step 5',\n            state: StepState.disabled\n          }]\n        };\n        const [state, dispatch] = useReducer(reducer, initialState);\n        const lastStep = state.activeStepIndex === state.steps.length - 1;\n        return <div style={{\n          maxWidth: '400px'\n        }}>\n      <Stepper className=\"stepper-overflow\" steps={state.steps} language=\"en\" selectedStep={state.activeStepIndex} onStepClick={(event, stepIndex) => dispatch({\n            type: 'setActive',\n            payload: stepIndex\n          })} mdxType=\"Stepper\" />\n      <div style={{\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'flex-end',\n            gap: '24px'\n          }}>\n        <Button disabled={state.activeStepIndex === 0} variant=\"secondary\" onClick={() => dispatch({\n              type: 'setActive',\n              payload: state.activeStepIndex - 1\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconLeft={<IconArrowLeft mdxType=\"IconArrowLeft\" />} mdxType=\"Button\">\n          Previous\n        </Button>\n        <Button variant={lastStep ? 'primary' : 'secondary'} onClick={() => dispatch({\n              type: 'completeStep',\n              payload: state.activeStepIndex\n            })} style={{\n              height: 'fit-content',\n              width: 'fit-content'\n            }} iconRight={lastStep ? undefined : <IconArrowRight mdxType=\"IconArrowRight\" />} mdxType=\"Button\">\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-3\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  // Check the commonReducer implementation in the Default variant example\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div \n      style={{\n        maxWidth: '400px'\n      }}\n    >\n      <Stepper\n        className=\"stepper-overflow\"\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-states\"\n    }}>{`Step states`}</h3>\n    <p>{`The HDS stepper offers multiple predefined states for steps to be used. `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`completed`}</inlineCode>{` state for completed steps`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`available`}</inlineCode>{` state for steps that are available but not completed yet`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`attention`}</inlineCode>{` state for steps that require the user's attention (e.g. the step has been edited by another user)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`paused`}</inlineCode>{` state for steps that require the user's attention (e.g. waiting for a review from officials)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disabled`}</inlineCode>{` state for steps that are not available yet (e.g. require a previous step to be completed first)`}</li>\n    </ul>\n    <Playground __position={7} __code={'<div>\\n  <div>\\n    <Stepper\\n      className=\\\"stepper-states-example\\\"\\n      language=\\\"en\\\"\\n      onStepClick={function noRefCheck() {}}\\n      selectedStep={1}\\n      steps={[\\n        {\\n          label: \\'Completed\\',\\n          state: StepState.completed,\\n        },\\n        {\\n          label: \\'Current\\',\\n          state: StepState.available,\\n        },\\n        {\\n          label: \\'Available\\',\\n          state: StepState.available,\\n        },\\n        {\\n          label: \\'Needs attention\\',\\n          state: StepState.attention,\\n        },\\n        {\\n          label: \\'Paused\\',\\n          state: StepState.paused,\\n        },\\n        {\\n          label: \\'Disabled\\',\\n          state: StepState.disabled,\\n        },\\n      ]}\\n    />\\n  </div>\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      useReducer,\n      Playground,\n      StatusLabel,\n      Notification,\n      Stepper,\n      Button,\n      StepState,\n      IconArrowLeft,\n      IconArrowRight,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      <div>\n  <div>\n    <Stepper className=\"stepper-states-example\" language=\"en\" onStepClick={function noRefCheck() {}} selectedStep={1} steps={[{\n            label: 'Completed',\n            state: StepState.completed\n          }, {\n            label: 'Current',\n            state: StepState.available\n          }, {\n            label: 'Available',\n            state: StepState.available\n          }, {\n            label: 'Needs attention',\n            state: StepState.attention\n          }, {\n            label: 'Paused',\n            state: StepState.paused\n          }, {\n            label: 'Disabled',\n            state: StepState.disabled\n          }]} mdxType=\"Stepper\" />\n  </div>\n      </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-4\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<div>\n  <div>\n    <Stepper\n      className=\"stepper-states-example\"\n      language=\"en\"\n      onStepClick={function noRefCheck(){}}\n      selectedStep={1}\n      steps={[\n        {\n          label: 'Completed',\n          state: StepState.completed\n        },\n        {\n          label: 'Current',\n          state: StepState.available\n        },\n        {\n          label: 'Available',\n          state: StepState.available\n        },\n        {\n          label: 'Needs attention',\n          state: StepState.attention\n        },\n        {\n          label: 'Paused',\n          state: StepState.paused\n        },\n        {\n          label: 'Disabled',\n          state: StepState.disabled\n        }\n      ]}\n    />\n  </div>\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos--api\"\n    }}>{`Demos & API`}</h2>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <p><em parentName=\"p\">{`Not included in hds-core!`}</em></p>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-stepper--default\"\n      }}>{`Stepper in hds-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/components-stepper--default\"\n      }}>{`Stepper API`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}